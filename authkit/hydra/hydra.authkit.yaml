---
swagger: "2.0"
info:
  version: "1.0"
  title: "ory-am/hydra"
  description: |
      * [Hydra on GitHub](https://github.com/ory-am/hydra)

      * [Hydra Guide](https://ory-am.gitbooks.io/hydra/content/index.html)

      Hydra implements [OpenID Connect](http://openid.net/specs/openid-connect-core-1_0.html).
      If you have never heard of OpenID Connect, check out this
      [OpenID Connect Introduction](http://connect2id.com/learn/openid-connect).
  license:
    name: "MIT"
    url: "http://github.com/gruntjs/grunt/blob/master/LICENSE-MIT"
host: "polls.apiblueprint.org"
basePath: "/"
schemes:
  - "http"
consumes:
  - "application/json"
produces:
  - "application/json"
securityDefinitions:
  basic:
    type: "basic"
paths:
  /oauth2/auth:
    get:
      summary: "OAuth2 Auth Endpoint"
      description: |
          This section is missing documentation, please check the IETF
          specification.
      tags:
        - "oauth2"
      operationId: "OAuth2 Auth Endpoint"
      produces:
        - "application/json"
      parameters: []
      responses:
        200:
          description: "OK"
  /oauth2/token:
    post:
      summary: "OAuth2 Token Endpoint"
      description: |
          This section is missing documentation, please check the IETF
          specification.
      tags:
        - "oauth2"
      operationId: "OAuth2 Token Endpoint"
      produces:
        - "application/json"
      parameters: []
      responses:
        200:
          description: "OK"
  /oauth2/introspect:
    post:
      summary: "OAuth2 Token Introspection"
      description: |
          This endpoint implements the IETF [OAuth 2.0 Token
          Introspection](https://tools.ietf.org/html/rfc7662).
          It is targeted at public clients that need to introspect an access
          token. Be aware that bearer and introspection token must be different.
          Extra data set through the `at_ext` claim in the consent response
          will be included in the response. The `id_ext` claim will never be
          returned by this endpoint.
      tags:
        - "oauth2"
      operationId: "OAuth2 Token Introspection"
      produces:
        - "application/json"
      parameters:
        -
          name: "body"
          in: "body"
          required: true
          schema:
            type: "string"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Oauth2TokenIntrospectionResponse"
          examples:
            application/json:
              active: true
              sub: "f1e71e67-edbe-429c-b51d-d72df8f44266"
              exp: 1470595670
              iat: 1470592070
              nbf: 1470592070
              aud: "f1e71e67-edbe-429c-b51d-d72df8f44266"
              iss: "hydra.localhost"
              ext: ""
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
  /oauth2/revoke:
    post:
      description: "Revoke token, issued by Hydra"
      tags:
        - "oauth2"
      operationId: "Revoke"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "token"
          in: "formData"
          required: true
          type: "string"
      responses:
        200:
          description: "OK"
      security:
        - basic: []
  /clients:
    post:
      summary: "Create a New OAuth2 Client"
      description: |
          The response contains a secret which is only issued once. Keep the
          secret in a safe place because you will not be able to recover it.

          **Access Control Requirements**

          * Scope: `hydra.clients`

          * Action: `create`

          * Resource: `rn:hydra:clients`

          * Context: `{"owner:" "john@doe.com"}`
      tags:
        - "oauth2"
      operationId: "Create a New OAuth2 Client"
      produces:
        - "application/json"
      parameters: []
      responses:
        201:
          description: "Created"
          examples:
            application/json:
              id: "043b6cdd-80a4-4c9b-b99f-d3853c1dc677"
              owner: "john.doe@doe.com"
              scope: "foo bar"
              public: false
              client_name: "Mobile client app"
              client_secrent: "some s3cr3t Pa$$w0rD_!"
              redirect_uris:
                - "https://myproject.com/callback"
                - "http://localhost/cb"
              grant_types:
                - "implicit"
                - "refresh_token"
                - "authorization_code"
                - "password"
                - "client_credentials"
              response_types:
                - "code"
                - "token"
                - "id_token"
              policy_uri: "https://myproject.com/policy"
              tos_uri: "https://myproject.com/tos"
              client_uri: "https://myproject.com/"
              logo_uri: "https://myproject.com/logo.png"
              contacts:
                - "john.doe@doe.com"
                - "admin@doe.com"
          schema:
            $ref: "#/definitions/Oauth2ClientBase"
        400:
          description: "Bad Request"
          examples:
            application/json:
              request: "a0ce869c-26ad-45e9-bc8c-1fba6027fc03"
              error: "Bad request"
              code: 400
        401:
          description: "Unauthorized"
          examples:
            application/json:
              request: "a0ce869c-26ad-45e9-bc8c-1fba6027fc03"
              error: "Unauthorized"
              code: 401
        403:
          description: "Forbidden"
          examples:
            application/json:
              request: "a0ce869c-26ad-45e9-bc8c-1fba6027fc03"
              error: "Forbidden"
              code: 403
  /clients/{id}:
    get:
      summary: "Get an OAuth2 Client"
      description: |
          **Access Control Requirements**

          * Scope: `hydra.clients`

          * Action: `get`

          * Resource: `rn:hydra:clients:<id>`

          * Context: `{"owner:" "john@doe.com"}`
      tags:
        - "oauth2"
      operationId: "Get an OAuth2 Client"
      produces:
        - "application/json"
      parameters:
        -
          name: "id"
          in: "path"
          description: "The client's `id`."
          required: true
          type: "string"
      responses:
        200:
          description: "OK"
          examples:
            application/json:
              id: "043b6cdd-80a4-4c9b-b99f-d3853c1dc677"
              owner: "john.doe@doe.com"
              scope: "foo bar"
              public: false
              client_name: "Mobile client app"
              client_secrent: "some s3cr3t Pa$$w0rD_!"
              redirect_uris:
                - "https://myproject.com/callback"
                - "http://localhost/cb"
              grant_types:
                - "implicit"
                - "refresh_token"
                - "authorization_code"
                - "password"
                - "client_credentials"
              response_types:
                - "code"
                - "token"
                - "id_token"
              policy_uri: "https://myproject.com/policy"
              tos_uri: "https://myproject.com/tos"
              client_uri: "https://myproject.com/"
              logo_uri: "https://myproject.com/logo.png"
              contacts:
                - "john.doe@doe.com"
                - "admin@doe.com"
          schema:
            $ref: "#/definitions/Oauth2ClientBase"
        400:
          description: "Bad Request"
          examples:
            application/json:
              request: "a0ce869c-26ad-45e9-bc8c-1fba6027fc03"
              error: "Bad request"
              code: 400
        401:
          description: "Unauthorized"
          examples:
            application/json:
              request: "a0ce869c-26ad-45e9-bc8c-1fba6027fc03"
              error: "Unauthorized"
              code: 401
        403:
          description: "Forbidden"
          examples:
            application/json:
              request: "a0ce869c-26ad-45e9-bc8c-1fba6027fc03"
              error: "Forbidden"
              code: 403
        404:
          description: "Not Found"
          examples:
            application/json:
              request: "a0ce869c-26ad-45e9-bc8c-1fba6027fc03"
              error: "Not found"
              code: 404
    delete:
      summary: "Delete an OAuth2 Client"
      description: |
          **Access Control Definitions**

          * Scope: `hydra.clients`

          * Action: `delete`

          * Resource: `rn:hydra:clients:<id>`

          * Context: `{"owner:" "john@doe.com"}`
      tags:
        - "oauth2"
      operationId: "Delete an OAuth2 Client"
      produces:
        - "application/json"
      parameters:
        -
          name: "id"
          in: "path"
          description: "The client's `id`."
          required: true
          type: "string"
      responses:
        204:
          description: "No Content"
        400:
          description: "Bad Request"
          examples:
            application/json:
              request: "a0ce869c-26ad-45e9-bc8c-1fba6027fc03"
              error: "Bad request"
              code: 400
        401:
          description: "Unauthorized"
          examples:
            application/json:
              request: "a0ce869c-26ad-45e9-bc8c-1fba6027fc03"
              error: "Unauthorized"
              code: 401
        403:
          description: "Forbidden"
          examples:
            application/json:
              request: "a0ce869c-26ad-45e9-bc8c-1fba6027fc03"
              error: "Forbidden"
              code: 403
  /keys/{set}:
    get:
      summary: "Get a JSON Web Key Set"
      description: |
          **Access Control Requirements**

          * Scope: `hydra.keys.get`

          * Action: `get`

          * Resource: `rn:hydra:keys:<set>`

          * Context: *not supported*
      tags:
        - "jwk"
      operationId: "Get a JSON Web Key Set"
      produces:
        - "application/json"
      parameters:
        -
          name: "set"
          in: "path"
          description: "the set name, e.g. \"app-tls-keys\"."
          required: true
          type: "string"
      responses:
        200:
          description: "OK"
          examples:
            application/json:
              keys:
                - kid: ""
                  kty: ""
          schema:
            $ref: "#/definitions/JsonWebKeySet"
    put:
      summary: "Upload a JSON Web Key Set"
      description: |
          **Access Control Requirements**

          * Scope: `hydra.keys.update`

          * Action: `update`

          * Resource: `rn:hydra:keys:<set>`

          * Context: *not supported*
      tags:
        - "jwk"
      operationId: "Upload a JSON Web Key Set"
      produces:
        - "application/json"
      parameters:
        -
          name: "set"
          in: "path"
          required: true
          type: "string"
          description: "the set name, e.g. \"app-tls-keys\"."
        -
          name: "body"
          in: "body"
          schema:
            $ref: "#/definitions/JsonWebKeySet"
      responses:
        200:
          description: "OK"
          examples:
            application/json:
              keys:
                - kid: ""
                  kty: ""
          schema:
            $ref: "#/definitions/JsonWebKeySet"
    post:
      description: |
          **Access Control Requirements**

          * Scope: `hydra.keys.create`

          * Action: `create`

          * Resource: `rn:hydra:keys:<set>`

          * Context: *not supported*
      tags:
        - "jwk"
      operationId: "Generate a new JSON Web Key Set"
      produces:
        - "application/json"
      parameters:
        -
          name: "set"
          in: "path"
          required: true
          type: "string"
          description: "the set name, e.g. \"app-tls-keys\"."
        -
          name: "body"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/GenerateANewJsonWebKeySetRequest"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/JsonWebKeySet"
    delete:
      description: |
          **Access Control Requirements**

          * Scope: `hydra.keys.delete`

          * Action: `delete`

          * Resource: `rn:hydra:keys:<set>`

          * Context: *not supported*
      tags:
        - "jwk"
      operationId: "Delete a JSON Web Key Set"
      produces:
        - "application/json"
      parameters:
        -
          name: "set"
          in: "path"
          required: true
          type: "string"
          description: "the set name, e.g. \"app-tls-keys\"."
      responses:
        200:
          description: "OK"
  /keys/{set}/{kid}:
    get:
      description: |
          **Access Control Requirements**

          * Scope: `hydra.keys.get`

          * Action: `get`

          * Resource: `rn:hydra:keys:<set>:<key>`

          * Context: *not supported*
      tags:
        - "jwk"
      operationId: "GetJWK"
      produces:
        - "application/json"
      parameters:
        -
          name: "set"
          in: "path"
          required: true
          type: "string"
          description: "the set name, e.g. `app-tls-keys`."
        -
          name: "kid"
          in: "path"
          required: true
          type: "string"
          description: "the set name, e.g. `shared´."
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/JsonWebKeySet"
    put:
      description: |
          **Access Control Requirements**

          * Scope: `hydra.keys.update`

          * Action: `update`

          * Resource: `rn:hydra:keys:<set>:<key>`

          * Context: *not supported*
      tags:
        - "jwk"
      operationId: "Set a JSON Web Key"
      produces:
        - "application/json"
      parameters:
        -
          name: "set"
          in: "path"
          required: true
          type: "string"
          description: "the set name, e.g. `app-tls-keys`."
        -
          name: "kid"
          in: "path"
          required: true
          type: "string"
          description: "the set name, e.g. `shared´."
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/JsonWebKeySet"
    delete:
      description: |
          **Access Control Requirements**

          * Scope: `hydra.keys.delete`

          * Action: `delete`

          * Resource: `rn:hydra:keys:<set>:<key>`

          * Context: *not supported*
      tags:
        - "jwk"
      operationId: "Delete a JSON Web Key"
      produces:
        - "application/json"
      parameters:
        -
          name: "set"
          in: "path"
          required: true
          type: "string"
          description: "the set name, e.g. `app-tls-keys`."
        -
          name: "kid"
          in: "path"
          required: true
          type: "string"
          description: "the set name, e.g. `shared´."
      responses:
        200:
          description: "OK"
  /policies:
    get:
      description: |
          **Access Control Requirements**

          * Scope: `hydra.policies`

          * Action: `find`

          * Resource: `rn:hydra:policies`

          * Context: *not supported*
      tags:
        - "Policies For Access Control"
      operationId: "Find Policies by Subject ID"
      produces:
        - "application/json"
      parameters:
        -
          name: "subject"
          in: "query"
          required: true
          type: "string"
          description: "only return relevant policies for `subject`, e.g. `max`."
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/PolicyBase"
    post:
      description: |
          **Access Control Requirements**

          * Scope: `hydra.policies`

          * Action: `create`

          * Resource: `rn:hydra:policies`

          * Context: *not supported*
      tags:
        - "Policies For Access Control"
      operationId: "Create a Policy"
      produces:
        - "application/json"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/PolicyBase"
  /policies/{id}:
    get:
      description: |
          **Access Control Requirements**

          * Scope: `hydra.policies`

          * Action: `get`

          * Resource: `rn:hydra:policies:<id>`

          * Context: *not supported*
      tags:
        - "Policies For Access Control"
      operationId: "Get Policy"
      produces:
        - "application/json"
      parameters:
        -
          name: "id"
          in: "path"
          required: true
          type: "string"
          description: "the policy's id."
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/PolicyBase"
    delete:
      description: |
          **Access Control Requirements**

          * Scope: `hydra.policies`

          * Action: `delete`

          * Resource: `rn:hydra:policies:<id>`

          * Context: *not supported*
      tags:
        - "Policies For Access Control"
      operationId: "Delete Policy"
      produces:
        - "application/json"
      parameters:
        -
          name: "id"
          in: "path"
          required: true
          type: "string"
          description: "the policy's id."
      responses:
        200:
          description: "OK"
  /warden/token/allowed:
    post:
      description: |
          **Access Control Requirements**

          * Scope: `hydra.warden`

          * Action: `decide`

          * Resource: `rn:hydra:warden:token:allowed`

          * Context: *not supported*
      tags:
        - "warden"
      operationId: "IsAllowed"
      produces:
        - "application/json"
      parameters:
        -
          name: "body"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/WardenIsAllowedRequest"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/WardenIsAllowedResponse"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
  /warden/allowed:
    post:
      description: |
          **Access Control Requirements**

          * Scope: `hydra.warden`

          * Action: `decide`

          * Resource: `rn:hydra:warden:valid`

          * Context: *not supported*
      tags:
        - "warden"
      operationId: "Check if a subject is allowed to do something"
      produces:
        - "application/json"
      parameters:
        -
          name: "body"
          in: "body"
          required: true
          schema:
            $ref: "#/definitions/CheckIfASubjectIsAllowedToDoSomethingRequest"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/CheckIfASubjectIsAllowedToDoSomethingResponse"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"
definitions:
  PolicyBase:
    title: "Policy Base"
    type: "object"
    properties:
      description:
        type: "string"
      subjects:
        type: "array"
        items:
          type: "string"
      effect:
        type: "string"
      resources:
        type: "array"
        items:
          type: "string"
      actions:
        type: "array"
        items:
          type: "string"
      conditions:
        $ref: "#/definitions/Conditions"
  Conditions:
    title: "conditions"
    type: "object"
    properties:
      remoteIP:
        $ref: "#/definitions/RemoteIP"
  RemoteIP:
    title: "remoteIP"
    type: "object"
    properties:
      type CIDRCondition:
        type: "string"
      options:
        $ref: "#/definitions/Options"
  Options:
    title: "options"
    type: "object"
    properties:
      range "192.168.178.1/32":
        type: "string"
  JsonWebKeySet:
    title: "JSON Web Key Set"
    type: "object"
    properties:
      keys:
        type: "array"
        items:
          $ref: "#/definitions/JsonWebKey"
  JsonWebKey:
    title: "JSON Web Key"
    type: "object"
    properties:
      keys:
        type: "array"
        items:
          $ref: "#/definitions/JsonWebKey"
      kty:
        type: "string"
      use:
        type: "string"
      kid:
        type: "string"
      alg:
        type: "string"
      crv:
        type: "string"
      x:
        type: "string"
      "y":
        type: "string"
      d:
        type: "string"
      "n":
        type: "string"
      e:
        type: "string"
      k:
        type: "string"
    required:
      - kty
    x-go-type:
      import:
        package: "github.com/letsrock-today/authkit/authkit/hydra/jwk"
        alias: "jwk"
      type: "Key"
  Oauth2ClientBase:
    title: "OAuth2 Client Base"
    type: "object"
    properties:
      id:
        description: |
            A unique identitfier. If none is provided, one will be generated
            for you.
        type: "string"
      owner:
        type: "string"
      scope:
        description: "A list of scopes separated by whitespace."
        type: "string"
      public:
        description: |
            When set, this public won't need a secret for performing certain
            flows. It will disallow the client from using the
            client_credentials flow.
        type: "boolean"
      client_name:
        description: "Name of the Client to be presented to the End-User."
        type: "string"
      client_secrent:
        description: |
            The secret to authenticate the client with. If no secret is
            provided, a random one will be generated returned in the response.
            If a secret is provided it will not be included in the response.
        type: "string"
      redirect_uris:
        description: |
            Array of Redirection URI values used by the Client. One of these
            registered Redirection URI values MUST exactly match the
            redirect_uri parameter value used in each Authorization Request
        type: "array"
        items:
          type: "string"
      grant_types:
        description: |
            Array containing a list of the OAuth 2.0 Grant Types that the
            Client is declaring that it will restrict itself to using.
            The Grant Type values used by OpenID Connect are:

                - authorization_code: The Authorization Code Grant Type.

                - implicit: The Implicit Grant Type

                - refresh_token: The Refresh Token Grant Type


            The following table lists the correspondence between response_type
            values that the Client will use and grant_type values that MUST be
            included in the registered grant_types list:

                - code: authorization_code

                - id_token: implicit

                - token id_token: implicit

                - code id_token: authorization_code, implicit

                - code token: authorization_code, implicit

                - code token id_token: authorization_code, implicit
        type: "array"
        items:
          type: "string"
      response_types:
        description: |
            JSON array containing a list of the OAuth 2.0 response_type values
            that the Client is declaring that it will restrict itself to using.
            If omitted, the default is that the Client will use only the code
            Response Type.
        type: "array"
        items:
          type: "string"
      policy_uri:
        description: |
            URL that the Relying Party Client provides to the End-User to read
            about the how the profile data will be used. The value of this
            field MUST point to a valid web page. The OpenID Provider SHOULD
            display this URL to the End-User if it is given.
        type: "string"
      tos_uri:
        description: |
            URL that the Relying Party Client provides to the End-User to read
            about the Relying Party's terms of service. The value of this field
            MUST point to a valid web page. The OpenID Provider SHOULD display
            this URL to the End-User if it is given.
        type: "string"
      client_uri:
        description: |
            URL of the home page of the Client. The value of this field MUST
            point to a valid Web page. If present, the server SHOULD display
            this URL to the End-User in a followable fashion.
        type: "string"
      logo_uri:
        description: |
            URL that references a logo for the Client application. If present,
            the server SHOULD display this image to the End-User during
            approval. The value of this field MUST point to a valid image file.
        type: "string"
      contacts:
        description: |
            Array of e-mail addresses of people responsible for this Client.
            This might be used by some providers to enable a Web user interface
            to modify the Client information.
        type: "array"
        items:
          type: "string"
    required:
      - "redirect_uris"
  Oauth2TokenIntrospectionResponse:
    title: "OAuth2 Token Introspection Response"
    type: "object"
    properties:
      active:
        type: "boolean"
      sub:
        type: "string"
      exp:
        type: "integer"
        format: "int32"
      iat:
        type: "integer"
        format: "int32"
      nbf:
        type: "integer"
        format: "int32"
      aud:
        type: "string"
      iss:
        type: "string"
      ext:
        type: "string"
    required:
      - "active"
      - "sub"
      - "exp"
      - "iat"
      - "nbf"
      - "aud"
      - "iss"
      - "ext"
  GenerateANewJsonWebKeySetRequest:
    title: "Generate a new JSON Web Key Set request"
    type: "object"
    properties:
      alg:
        type: "string"
    required:
      - "alg"
  WardenIsAllowedRequest:
    title: "Check if the subject of a token is allowed to do something request"
    type: "object"
    properties:
      scopes:
        type: "array"
        items:
          type: "string"
      token:
        type: "string"
      resource:
        type: "string"
      action:
        type: "string"
      context:
        type: "string"
    required:
      - "scopes"
      - "token"
      - "resource"
      - "action"
      - "context"
  WardenIsAllowedResponse:
    title: "Check if the subject of a token is allowed to do something Response"
    type: "object"
    properties:
      allowed:
        type: "boolean"
      sub:
        type: "string"
      scopes:
        type: "array"
        items:
          type: "string"
      iss:
        type: "string"
      aud:
        type: "string"
      exp:
        type: "string"
      iat:
        type: "string"
      ext:
        type: "string"
    required:
      - "allowed"
      - "sub"
      - "scopes"
      - "iss"
      - "aud"
      - "exp"
      - "iat"
      - "ext"
  CheckIfASubjectIsAllowedToDoSomethingRequest:
    title: "Check if a subject is allowed to do something request"
    type: "object"
    properties:
      resource:
        type: "string"
      action:
        type: "string"
      subject:
        type: "string"
      context:
        type: "string"
    required:
      - "resource"
      - "action"
      - "subject"
      - "context"
  CheckIfASubjectIsAllowedToDoSomethingResponse:
    title: "Check if a subject is allowed to do something Response"
    type: "object"
    properties:
      allowed:
        type: "boolean"
    required:
      - "allowed"
